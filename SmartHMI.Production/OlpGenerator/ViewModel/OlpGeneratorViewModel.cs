using Kuka.FlexDrill.Process.CustomClasses;
using Kuka.FlexDrill.Process.KRLGenerator;
using Kuka.FlexDrill.Process.OLPParser;
using Kuka.FlexDrill.SmartHMI.Production.Base;
using Kuka.FlexDrill.SmartHMI.Production.Helper;
using Kuka.FlexDrill.SmartHMI.Production.Messages;
using Kuka.FlexDrill.SmartHMI.Production.OlpGenerator.Model;
using KukaRoboter.CoreUtil.Windows.Input;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Xml.Serialization;
using KukaRoboter.CoreUtil.Attributes;
using KukaRoboter.Common.ApplicationServices.Dialogs;
using Kuka.FlexDrill.SmartHMI.Production.Geometry;

namespace Kuka.FlexDrill.SmartHMI.Production.OlpGenerator.ViewModel
{
   public class OlpGeneratorViewModel : FlexDrillViewModelBase
   {
      #region Constants and Fields

      private RelayCommand generateOlpCommand;

      private RelayCommand addOperationCommand;

      private RelayCommand removeOperationCommand;

      private RelayCommand teachFirstVisionTargetCommand;

      private RelayCommand teachSecondVisionTargetCommand;

      private RelayCommand addPointCommand;

      private RelayCommand removePointCommand;

      private RelayCommand moveOpUpCommand;

      private RelayCommand moveOpDownCommand;

      private RelayCommand movePointUpCommand;

      private RelayCommand movePointDownCommand;

      private RelayCommand addInputPointCommand;

      private RelayCommand removeInputPointCommand;

      private RelayCommand addOutputPointCommand;

      private RelayCommand removeOutputPointCommand;

      private RelayCommand removeLastMacroCommand;

      private TypedRelayCommand<string> addMacroCommand;

      private RelayCommand manualPositionningCommand;

      private RelayCommand moveInAppPointUpCommand;

      private RelayCommand moveInAppPointDownCommand;

      private RelayCommand moveOutAppPointUpCommand;

      private RelayCommand moveOutAppPointDownCommand;

      private RelayCommand computeObjectFrameCommand;

      private TypedRelayCommand<string> teachObjectFramePointsCommand;

      private int selectedTabIndex;

      private int tcpNop;

      private int pSet;

      private RobotPoint autoGeneratedSelectedPoint;

      private Operation autoGeneratedSelectedOp;

      private CellProgram generatedCellProgram;

      private ObservableCollection<string> teachChoice;

      private string selectedChoice;

      private int selectedChoiceIdx;

      private bool visibilityTargets;

      private bool visibilityAllPoints;

      private bool visibilityPattern;

      private bool visibilityApproachPoints;

      private bool visibilityProcessDefinition;

      private CustomE6Pos firstVisionTarget;

      private CustomE6Pos secondVisionTarget;

      private CustomE6Pos NullPos;

      private RobotPoint selectedInputPoint;

      private RobotPoint selectedOutputPoint;

      private bool useInputApproachPoints;

      private bool activateOutputApproachPoints=true;

      private int selectedPatternIdx;

      private ObservableCollection<string> patternChoice;

      private bool visibilityNumberOfPoints;

      private bool visibilityDistanceTargetPoints;

      private RobotPoint selectedObjectFramePoint;

      private const string cszNullFrame = "(0.0, 0.0, 0.0, 0.0, 0.0, 0.0)";

      private const string cszTrajOnly = "TRAJONLY";

      private const string cszWork = "WORK";

      private string programName;

      private bool BaseComputed = false;

      private CustomE6Pos objectFrameOriginPoint;

      private CustomE6Pos objectFrameXAxisPoint;

      private CustomE6Pos objectFrameXYPlanPoint;

      private EulerFrame ComputedBase;

      #endregion

      #region Constructors and Destructor

      public OlpGeneratorViewModel() : base("FlexDrill_OlpGenerator")
      {
      }

      #endregion

      #region Interface

      /// <inheritdoc />
      public override void Initialize()
      {
         base.Initialize();
         //! Program Name
         ProgramName = "Auto Generated Olp - " + DateTime.Now.ToString("MM-dd-yyyy_HH_mm_ss_fff");
      }

      public void InitializePlugin()
      {
         //! List of Teach Choice
         if (TeachChoice == null)
         {
            TeachChoice = new ObservableCollection<string>
            {
               Resources.Strings["TeachAllPoints"],
               Resources.Strings["TeachPointWithPattern"]
            };
         }

         if (PatternChoice == null)
         {
            //! List Of PatternChoice
            PatternChoice = new ObservableCollection<string>
            {
               Resources.Strings["DistanceTargetToFirstPoint"],
               Resources.Strings["NumberofPoints"]
            };
         }

         //! Create First and Second Vision target for HMI
         if (FirstVisionTarget == null)
         {
            FirstVisionTarget = new CustomE6Pos();
         }
         if (SecondVisionTarget == null)
         {
            SecondVisionTarget = new CustomE6Pos();
         }

         //! Create Points for Object Frame
         if (ObjectFrameOriginPoint == null)
         {
            ObjectFrameOriginPoint = new CustomE6Pos();
            ObjectFrameOriginPoint = NullPos;
         }
         if (ObjectFrameXAxisPoint == null)
         {
            ObjectFrameXAxisPoint = new CustomE6Pos();
            ObjectFrameXAxisPoint = NullPos;
         }
         if (ObjectFrameXYPlanPoint == null)
         {
            ObjectFrameXYPlanPoint = new CustomE6Pos();
            ObjectFrameXYPlanPoint = NullPos;
         }

         if (NullPos == null)
         {
            NullPos = new CustomE6Pos
            {
               X = 0.0,
               Y = 0.0,
               Z = 0.0,
               S = 0,
               A = 0.0,
               B = 0.0,
               C = 0.0,
               T = 0
            };
         }
         if (GeneratedCellProgram == null)
         {
            CreateGeneratedCellProgram();
         }
         //! Visibility only if Generated Cell program is null
         if (GeneratedCellProgram.WorkSequence.LOperation.Count == 0)
         {
            SelectedPatternIdx = -1;
            //! Display Only First Tab
            VisibilityApproachPoints = false;
            VisibilityTargets = false;
            VisibilityAllPoints = false;
            VisibilityPattern = false;
            VisibilityProcessDefinition = false;
            
         }
         //! Set Base
         SetBase();
      }

      public RelayCommand GenerateOlpCommand
      {
         get
         {
            if (generateOlpCommand == null)
            {
               generateOlpCommand = new RelayCommand(action => GenerateOlp(), cond => CanGenerateOlp);
            }

            return generateOlpCommand;
         }
      }

      public bool CanGenerateOlp
      {
         get
         {
            return (GeneratedCellProgram?.WorkSequence?.LOperation.Count > 0);
         }
      }

      public RelayCommand AddPointCommand
      {
         get
         {
            if (addPointCommand == null)
            {
               addPointCommand = new RelayCommand(action => AddPoint("Local", MacroList.cszNOP.ToUpper(), ""), cond => CanAddPoint);
            }

            return addPointCommand;
         }
      }

      public bool CanAddPoint
      {
         get
         {
            return (AutoGeneratedSelectedOp != null);
         }
      }


      public RelayCommand AddOperationCommand
      {
         get
         {
            if (addOperationCommand == null)
            {
               addOperationCommand = new RelayCommand(action => AddOperation(), cond => CanAddOperation);
            }

            return addOperationCommand;
         }
      }

      public bool CanAddOperation
      {
         get
         {
            return true;
         }
      }

      public RelayCommand RemoveOperationCommand
      {
         get
         {
            if (removeOperationCommand == null)
            {
               removeOperationCommand = new RelayCommand(action => RemoveOperation(), cond => CanRemoveOperation);
            }

            return removeOperationCommand;
         }
      }

      public bool CanRemoveOperation
      {
         get
         {
            return (AutoGeneratedSelectedOp != null);
         }
      }

      public RelayCommand RemovePointCommand
      {
         get
         {
            if (removePointCommand == null)
            {
               removePointCommand = new RelayCommand(action => RemovePoint(), cond => CanRemovePoint);
            }

            return removePointCommand;
         }
      }

      public bool CanRemovePoint
      {
         get
         {
            return (AutoGeneratedSelectedPoint != null);
         }
      }

      public RelayCommand TeachFirstVisionTargetCommand
      {
         get
         {
            if (teachFirstVisionTargetCommand == null)
            {
               teachFirstVisionTargetCommand = new RelayCommand(action => TeachVisionTarget(0), cond => CanTeachVisionTarget);
            }

            return teachFirstVisionTargetCommand;
         }
      }

      public RelayCommand TeachSecondVisionTargetCommand
      {
         get
         {
            if (teachSecondVisionTargetCommand == null)
            {
               teachSecondVisionTargetCommand = new RelayCommand(action => TeachVisionTarget(1), cond => CanTeachVisionTarget);
            }

            return teachSecondVisionTargetCommand;
         }
      }

      public bool CanTeachVisionTarget
      {
         get
         {
            return (AutoGeneratedSelectedOp != null);
         }
      }

      public RelayCommand MoveOpUpCommand
      {
         get
         {
            if (moveOpUpCommand == null)
            {
               moveOpUpCommand = new RelayCommand(action => MoveOp(true), cond=> CanMoveOpUp);
            }

            return moveOpUpCommand;
         }
      }

      public bool CanMoveOpUp
      {
         get
         {
            if (GeneratedCellProgram != null)
            {
               int Idx = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);

               return (Idx > 0) && (AutoGeneratedSelectedOp != null);
            }
            else
            {
               return false;
            }
         }
      }

      public RelayCommand MoveOpDownCommand
      {
         get
         {
            if (moveOpDownCommand == null)
            {
               moveOpDownCommand = new RelayCommand(action => MoveOp(false), cond => CanMoveOpDown);
            }
      
            return moveOpDownCommand;
         }
      }

      public bool CanMoveOpDown
      {
         get
         {
            if (GeneratedCellProgram != null)
            {
               int Idx = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);

               return (Idx < (GeneratedCellProgram.WorkSequence.LOperation.Count - 1)) && (AutoGeneratedSelectedOp != null);
            }
            else
            {
               return false;
            }
         }
      }

      public RelayCommand MovePointUpCommand
      {
         get
         {
            if (movePointUpCommand == null)
            {
               movePointUpCommand = new RelayCommand(action => MovePoint(true), cond => CanMovePointUp);
            }

            return movePointUpCommand;
         }
      }

      public bool CanMovePointUp
      {
         get
         {
            if (GeneratedCellProgram != null)
            {
               int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);
               if (IdxOp != -1)
               {
                  int Idx = AutoGeneratedSelectedOp.WorkPoints.IndexOf(AutoGeneratedSelectedPoint);
                  return (Idx > 0) && (AutoGeneratedSelectedPoint != null);
               }
               else
               {
                  return false;
               }
            }
            else
            {
               return false;
            }
         }
      }

      public RelayCommand MovePointDownCommand
      {
         get
         {
            if (movePointDownCommand == null)
            {
               movePointDownCommand = new RelayCommand(action => MovePoint(false), cond => CanMovePointDown);
            }

            return movePointDownCommand;
         }
      }

      public bool CanMovePointDown
      {
         get
         {
            if (GeneratedCellProgram != null)
            {
               int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);
               if (IdxOp != -1)
               {
                  int Idx = AutoGeneratedSelectedOp.WorkPoints.IndexOf(AutoGeneratedSelectedPoint);

                  return (Idx < (AutoGeneratedSelectedOp.WorkPoints.Count - 1)) && (AutoGeneratedSelectedPoint != null);
               }
               else
               {
                  return false;
               }
            }
            else
            {
               return false;
            }
         }
      }

      public RelayCommand AddInputPointCommand
      {
         get
         {
            if (addInputPointCommand == null)
            {
               addInputPointCommand = new RelayCommand(action => AddTrajPoint(true), cond => CanAddInputTrajPoint);
            }

            return addInputPointCommand;
         }
      }

      public bool CanAddInputTrajPoint
      {
         get
         {
            return (AutoGeneratedSelectedOp != null);
         }
      }

      public RelayCommand AddOutputPointCommand
      {
         get
         {
            if (addOutputPointCommand == null)
            {
               addOutputPointCommand = new RelayCommand(action => AddTrajPoint(false), cond => CanAddOutputTrajPoint);
            }

            return addOutputPointCommand;
         }
      }

      public bool CanAddOutputTrajPoint
      {
         get
         {
            return (AutoGeneratedSelectedOp != null) && ActivateOutputApproachPoints;
         }
      }

      public RelayCommand RemoveInputPointCommand
      {
         get
         {
            if (removeInputPointCommand == null)
            {
               removeInputPointCommand = new RelayCommand(action => RemoveTrajPoint(true), cond => CanRemoveInputTrajPoint);
            }

            return removeInputPointCommand;
         }
      }

      public bool CanRemoveInputTrajPoint
      {
         get
         {
            return (SelectedInputPoint != null);
         }
      }


      public RelayCommand RemoveOutputPointCommand
      {
         get
         {
            if (removeOutputPointCommand == null)
            {
               removeOutputPointCommand = new RelayCommand(action => RemoveTrajPoint(false), cond => CanRemoveOutputTrajPoint);
            }

            return removeOutputPointCommand;
         }
      }

      public bool CanRemoveOutputTrajPoint
      {
         get
         {
            return (SelectedOutputPoint != null);
         }
      }

      public TypedRelayCommand<string> AddMacroCommand
      {
        
         get
         {
            if (addMacroCommand == null)
            {
               addMacroCommand = new TypedRelayCommand<String>(s => AddMacroToProcess(s), cond => CanAddMacro);
            }

            return addMacroCommand;
         }
      }

      public RelayCommand ManualPositionningCommand
      {

         get
         {
            if (manualPositionningCommand == null)
            {
               manualPositionningCommand = new RelayCommand(action => StartManualPositionning());
            }

            return manualPositionningCommand;
         }
      }

      public bool CanAddMacro
      {
         get
         {
            return (AutoGeneratedSelectedPoint != null);
         }
      }


      public RelayCommand RemoveLastMacroCommand
      {
         get
         {
            if (removeLastMacroCommand == null)
            {
               removeLastMacroCommand = new RelayCommand(action => RemoveLastMacro(), cond => CanRemoveLastMacro);
            }

            return removeLastMacroCommand;
         }
      }

      public bool CanRemoveLastMacro
      {
         get
         {
            return (AutoGeneratedSelectedPoint != null);
         }
      }

      public RelayCommand MoveInAppPointDownCommand
      {
         get
         {
            if (moveInAppPointDownCommand == null)
            {
               moveInAppPointDownCommand = new RelayCommand(action => MoveAppPoint(true, false), cond => CanMoveInPointDown);
            }

            return moveInAppPointDownCommand;
         }
      }

      public bool CanMoveInPointDown
      {
         get
         {
            if (GeneratedCellProgram != null)
            {
               int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);
               if (IdxOp != -1)
               {
                  int Idx = AutoGeneratedSelectedOp.InputApproachPoints.IndexOf(SelectedInputPoint);

                  return (Idx < (AutoGeneratedSelectedOp.InputApproachPoints.Count - 1)) && (SelectedInputPoint != null);
               }
               else
               {
                  return false;
               }
            }
            else
            {
               return false;
            }
         }
      }

      public RelayCommand MoveInAppPointUpCommand
      {
         get
         {
            if (moveInAppPointUpCommand == null)
            {
               moveInAppPointUpCommand = new RelayCommand(action => MoveAppPoint(true, true), cond => CanMoveInPointUp);
            }

            return moveInAppPointUpCommand;
         }
      }

      public bool CanMoveInPointUp
      {
         get
         {
            if (GeneratedCellProgram != null)
            {
               int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);
               if (IdxOp != -1)
               {
                  int Idx = AutoGeneratedSelectedOp.InputApproachPoints.IndexOf(SelectedInputPoint);
                  return (Idx > 0) && (SelectedInputPoint != null);
               }
               else
               {
                  return false;
               }
            }
            else
            {
               return false;
            }
         }
      }

      public RelayCommand MoveOutAppPointUpCommand
      {
         get
         {
            if (moveOutAppPointUpCommand == null)
            {
               moveOutAppPointUpCommand = new RelayCommand(action => MoveAppPoint(false, true), cond => CanMoveOutPointUp);
            }

            return moveOutAppPointUpCommand;
         }
      }

      public bool CanMoveOutPointUp
      {
         get
         {
            if (GeneratedCellProgram != null)
            {
               int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);
               if (IdxOp != -1)
               {
                  int Idx = AutoGeneratedSelectedOp.OutputApproachPoints.IndexOf(SelectedOutputPoint);
                  return (Idx > 0) && (SelectedOutputPoint != null);
               }
               else
               {
                  return false;
               }
            }
            else
            {
               return false;
            }
         }
      }

      public RelayCommand MoveOutAppPointDownCommand
      {
         get
         {
            if (moveOutAppPointDownCommand == null)
            {
               moveOutAppPointDownCommand = new RelayCommand(action => MoveAppPoint(false, false), cond => CanMoveOutPointDown);
            }

            return moveOutAppPointDownCommand;
         }
      }
      public bool CanMoveOutPointDown
      {
         get
         {
            if (GeneratedCellProgram != null)
            {
               int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);
               if (IdxOp != -1)
               {
                  int Idx = AutoGeneratedSelectedOp.OutputApproachPoints.IndexOf(SelectedOutputPoint);

                  return (Idx < (AutoGeneratedSelectedOp.OutputApproachPoints.Count - 1)) && (SelectedOutputPoint != null);
               }
               else
               {
                  return false;
               }
            }
            else
            {
               return false;
            }
         }
      }
      
      public RelayCommand ComputeObjectFrameCommand
      {
         get
         {
            if (computeObjectFrameCommand == null)
            {
               computeObjectFrameCommand = new RelayCommand(action => ComputeObjectFrame(), cond => CanComputeObjectFrame);
            }

            return computeObjectFrameCommand;
         }
      }

      public bool CanComputeObjectFrame
      {
         get
         {
            bool lResult = false;
            if (GeneratedCellProgram != null)
            {
               lResult = ((ObjectFrameOriginPoint != null) && (ObjectFrameXAxisPoint != null) && (ObjectFrameXYPlanPoint != null));
            }
            return lResult;
         }
      }


      public TypedRelayCommand<string> TeachObjectFramePointsCommand
      {

         get
         {
            if (teachObjectFramePointsCommand == null)
            {
               teachObjectFramePointsCommand = new TypedRelayCommand<String>(s => SetObjectFramePoint(s), cond => CanTeachObjectFramePoints);
            }

            return teachObjectFramePointsCommand;
         }
      }

      public bool CanTeachObjectFramePoints
      {
         get
         {
            return true;
         }
      }

      private void SetObjectFramePoint(string s)
      {
         if (GeneratedCellProgram == null)
         {
            CreateGeneratedCellProgram();
         }
         CustomE6Pos Pos = KrlVarHandler.ReadPosVariable(KrlVariableNames.PosAct, Robot);
         int Idx = Convert.ToInt32(s);

         switch (Idx)
         {
            case 0:
               ObjectFrameOriginPoint = Pos;
               break;

            case 1:
               ObjectFrameXAxisPoint = Pos;
               break;

            case 2:
               ObjectFrameXYPlanPoint = Pos;
               break;
         }
      }

      public Operation AutoGeneratedSelectedOp
      {
         get
         {
            return autoGeneratedSelectedOp;
         }
         set
         {
            if (autoGeneratedSelectedOp != value)
            {
               autoGeneratedSelectedOp = value;
               UpdateVisionTargets();
               if (autoGeneratedSelectedOp != null)
               {
                  UseInputApproachPoints = autoGeneratedSelectedOp.UseSameInputOutputApproachPoint;
               }
               FirePropertyChanged("AutoGeneratedSelectedOp");
               
            }
         }
      }

      public RobotPoint AutoGeneratedSelectedPoint
      {
         get
         {
            return autoGeneratedSelectedPoint;
         }
         set
         {
            if (autoGeneratedSelectedPoint != value)
            {
               autoGeneratedSelectedPoint = value;
               FirePropertyChanged("AutoGeneratedSelectedPoint");
            }
         }
      }

      public ObservableCollection<string> TeachChoice
      {
         get
         {
            return teachChoice;
         }
         set
         {
            if (teachChoice != value)
            {
               teachChoice = value;
               FirePropertyChanged("TeachChoice");
            }
         }
      }
      
      public int SelectedChoiceIdx
      {
         get
         {
            return selectedChoiceIdx;
         }
         set
         {
            if (selectedChoiceIdx != value)
            {
               selectedChoiceIdx = value;
               FirePropertyChanged("SelectedChoiceIdx");
            }
            switch (selectedChoiceIdx)
            {
               case -1:
                  VisibilityAllPoints = false;
                  VisibilityPattern = false;
                  VisibilityProcessDefinition = false;
                  break;

               case 0:
                  VisibilityAllPoints = true; 
                  VisibilityPattern = false;
                  VisibilityProcessDefinition = true;
                  break;

               case 1:
                  VisibilityAllPoints = false;
                  VisibilityPattern = true;
                  VisibilityProcessDefinition = true;
                  break;
            }
         }
      }

      public string SelectedChoice
      {
         get
         {
            return selectedChoice;
         }
         set
         {
            if (selectedChoice != value)
            {
               selectedChoice = value;
               FirePropertyChanged("SelectedChoice");
            }
         }
      }

      public CellProgram GeneratedCellProgram
      {
         get
         {
            return generatedCellProgram;
         }
         set
         {
            if (generatedCellProgram != value)
            {
               generatedCellProgram = value;
               FirePropertyChanged("GeneratedCellProgram");
            }
         }
      }

      public bool VisibilityTargets
      {
         get
         {
            return visibilityTargets;
         }
         set
         {
            if (visibilityTargets != value)
            {
               visibilityTargets = value;
               FirePropertyChanged("VisibilityTargets");
            }
         }
      }

      public bool VisibilityAllPoints
      {
         get
         {
            return visibilityAllPoints;
         }
         set
         {
            if (visibilityAllPoints != value)
            {
               visibilityAllPoints = value;
               FirePropertyChanged("VisibilityAllPoints");
            }
         }
      }

      public bool VisibilityPattern
      {
         get
         {
            return visibilityPattern;
         }
         set
         {
            if (visibilityPattern != value)
            {
               visibilityPattern = value;
               FirePropertyChanged("VisibilityPattern");
            }
         }
      }

      public bool VisibilityApproachPoints
      {
         get
         {
            return visibilityApproachPoints;
         }
         set
         {
            if (visibilityApproachPoints != value)
            {
               visibilityApproachPoints = value;
               FirePropertyChanged("VisibilityApproachPoints");
            }
         }
      }

      public bool VisibilityProcessDefinition
      {
         get
         {
            return visibilityProcessDefinition;
         }
         set
         {
            if (visibilityProcessDefinition != value)
            {
               visibilityProcessDefinition = value;
               FirePropertyChanged("VisibilityProcessDefinition");
            }
         }
      }

      public CustomE6Pos FirstVisionTarget
      {
         get
         {
            return firstVisionTarget;
         }
         set
         {
            if (firstVisionTarget != value)
            {
               firstVisionTarget = value;
               FirePropertyChanged("FirstVisionTarget");
            }
         }
      }

      public CustomE6Pos SecondVisionTarget
      {
         get
         {
            return secondVisionTarget;
         }
         set
         {
            if (secondVisionTarget != value)
            {
               secondVisionTarget = value;
               FirePropertyChanged("SecondVisionTarget");
            }
         }
      }

      public RobotPoint SelectedInputPoint
      {
         get
         {
            return selectedInputPoint;
         }
         set
         {
            if (selectedInputPoint != value)
            {
               selectedInputPoint = value;
               FirePropertyChanged("SelectedInputPoint");
            }
         }
      }

      public RobotPoint SelectedOutputPoint
      {
         get
         {
            return selectedOutputPoint;
         }
         set
         {
            if (selectedOutputPoint != value)
            {
               selectedOutputPoint = value;
               FirePropertyChanged("SelectedOutputPoint");
            }
         }
      }

      public bool UseInputApproachPoints
      {
         get
         {
            return useInputApproachPoints;
         }
         set
         {
            if (useInputApproachPoints != value)
            {
               useInputApproachPoints = value;
               FirePropertyChanged("UseInputApproachPoints");
            }
            //! Enable / Disable Output Approach Point
            ActivateOutputApproachPoints = (!useInputApproachPoints);
            if (AutoGeneratedSelectedOp != null)
            {
               AutoGeneratedSelectedOp.UseSameInputOutputApproachPoint = useInputApproachPoints;
            }
         }
      }

      public bool ActivateOutputApproachPoints
      {
         get
         {
            return activateOutputApproachPoints;
         }
         set
         {
            if (activateOutputApproachPoints != value)
            {
               activateOutputApproachPoints = value;
               FirePropertyChanged("ActivateOutputApproachPoints");
            }
         }
      }

      public RobotPoint SelectedObjectFramePoint
      {
         get
         {
            return selectedObjectFramePoint;
         }
         set
         {
            if (selectedObjectFramePoint != value)
            {
               selectedObjectFramePoint = value;
               FirePropertyChanged("SelectedObjectFramePoint");
            }
         }
      }

      public ObservableCollection<string> PatternChoice
      {
         get
         {
            return patternChoice;
         }
         set
         {
            if (patternChoice != value)
            {
               patternChoice = value;
               FirePropertyChanged("PatternChoice");
            }
         }
      }

      public int SelectedPatternIdx
      {
         get
         {
            return selectedPatternIdx;
         }
         set
         {
            if (selectedPatternIdx != value)
            {
               selectedPatternIdx = value;
               FirePropertyChanged("SelectedPatternIdx");
            }
            switch (selectedPatternIdx)
            {
               case -1:
                  VisibilityDistanceTargetPoints = false;
                  VisibilityNumberOfPoints = false;
                  break;

               case 0:
                  VisibilityDistanceTargetPoints = true;
                  VisibilityNumberOfPoints = false;
                  break;

               case 1:
                  VisibilityDistanceTargetPoints = false;
                  VisibilityNumberOfPoints = true;
                  break;
            }
         }
      }

      public bool VisibilityNumberOfPoints
      {
         get
         {
            return visibilityNumberOfPoints;
         }
         set
         {
            if (visibilityNumberOfPoints != value)
            {
               visibilityNumberOfPoints = value;
               FirePropertyChanged("VisibilityNumberOfPoints");
            }
         }
      }

      public bool VisibilityDistanceTargetPoints
      {
         get
         {
            return visibilityDistanceTargetPoints;
         }
         set
         {
            if (visibilityDistanceTargetPoints != value)
            {
               visibilityDistanceTargetPoints = value;
               FirePropertyChanged("VisibilityDistanceTargetPoints");
            }
         }
      }

      public int TcpNop
      {
         get
         {
            return tcpNop;
         }
         set
         {
            if (tcpNop != value)
            {
               tcpNop = value;
               FirePropertyChanged("TcpNop");
            }
         }
      }

      public int PSet
      {
         get
         {
            return pSet;
         }
         set
         {
            if (pSet != value)
            {
               pSet = value;
               FirePropertyChanged("PSet");
            }
         }
      }

      public int SelectedTabIndex
      {
         get
         {
            return selectedTabIndex;
         }
         set
         {
            if (selectedTabIndex != value)
            {
               selectedTabIndex = value;
               FirePropertyChanged("SelectedTabIndex");
            }
         }
      }

      public string ProgramName
      {
         get
         {
            return programName;
         }
         set
         {
            if (programName != value)
            {
               programName = value;
               if (GeneratedCellProgram != null)
               {
                  if (GeneratedCellProgram.WorkSequence != null)
                  {
                     GeneratedCellProgram.WorkSequence.Name = programName;
                  }
               }

               FirePropertyChanged("ProgramName");
            }
         }
      }

      public CustomE6Pos ObjectFrameOriginPoint
      {
         get
         {
            return objectFrameOriginPoint;
         }
         set
         {
            if (objectFrameOriginPoint != value)
            {
               objectFrameOriginPoint = value;
               FirePropertyChanged("ObjectFrameOriginPoint");
            }
         }
      }

      public CustomE6Pos ObjectFrameXAxisPoint
      {
         get
         {
            return objectFrameXAxisPoint;
         }
         set
         {
            if (objectFrameXAxisPoint != value)
            {
               objectFrameXAxisPoint = value;
               FirePropertyChanged("ObjectFrameXAxisPoint");
            }
         }
      }

      public CustomE6Pos ObjectFrameXYPlanPoint
      {
         get
         {
            return objectFrameXYPlanPoint;
         }
         set
         {
            if (objectFrameXYPlanPoint != value)
            {
               objectFrameXYPlanPoint = value;
               FirePropertyChanged("ObjectFrameXYPlanPoint");
            }
         }
      }
      #endregion

      #region Methods
      private void CreateGeneratedCellProgram()
      {
         DateTime DateNow = DateTime.Now;
         GeneratedCellProgram = new CellProgram
         {
            Informations = new Informations
            {
               OLPDownloaderVersion = " ",
               OLPWorkCellPath = " ",
               OLPSoftwareVersion = " ",
               OLPWorkCell = " ",
               ProgrammerName = "KRC4 Cabinet",
               OLPProgramName = "Auto Generated Program",
               ProgramDate = DateNow.ToString("dd/MM/yyy")
            },
            CellConfiguration = new CellConfiguration
            {
               SafetyName = "Zone1",
               CellName = "FlexDrill Cell",
               WorkZoneName = "Auto Generated WorkZone " + DateNow.ToString("MM-dd-yyyy_HH_mm_ss_fff"),
               ObjectFrameName = "Auto Generated ObjectFrame " + DateNow.ToString("MM-dd-yyyy_HH_mm_ss_fff"),
               PartName = "Auto Generated Part " + DateNow.ToString("MM-dd-yyyy_HH_mm_ss_fff"),
               ConfigurationData = new ConfigurationData
               {
                  RobotFrame = "(0,0,0,0,0,0)",
                  ExternalAxisCount = "0",
                  RobRoot = "(0,0,0,0,0,0)",
                  ObjectFrame = cszNullFrame
               }

            },
            WorkSequence = new WorkSequence
            {
               LOperation = new ObservableCollection<Operation>()
            },
         };
      }
      private void AddOperation()
      {
         if (GeneratedCellProgram == null)
         {
            CreateGeneratedCellProgram();
         }
         //! Create New Op
         Operation AOperation = CreateNewEmptyOp();
         //! Add Operation
         GeneratedCellProgram.WorkSequence.LOperation.Add(AOperation);
         //! Tab Visibility
         VisibilityTargets = true;
         VisibilityApproachPoints = true;
         VisibilityProcessDefinition = true;
         //! Teach All Points
         SelectedChoiceIdx = 0;
         //! Select Last Op Added
         AutoGeneratedSelectedOp = GeneratedCellProgram.WorkSequence.LOperation[GeneratedCellProgram.WorkSequence.LOperation.Count - 1];
      }

      private void RemoveOperation()
      {
         GeneratedCellProgram.WorkSequence.LOperation.Remove(AutoGeneratedSelectedOp);
      }

      private Operation CreateNewEmptyOp()
      {
         //! Create New Op
         Operation FOp = new Operation
         {
            Name = "Auto Generated OP - " + DateTime.Now.ToString("MM-dd-yyyy_HH_mm_ss_fff"),
            RobotPoints = new RobotPoints()
         };
         FOp.RobotPoints.LRobotPoint = new ObservableCollection<RobotPoint>();
         FOp.Correctors = new Correctors
         {
            LCorrector = new ObservableCollection<Corrector>()
         };
         Corrector FCorrector = new Corrector
         {
            Name = "Local",
            Type = "RS",
            LTarget = new ObservableCollection<Target>()
         };
         FOp.Correctors.LCorrector.Add(FCorrector);
         //! Create 2 Targets
         for(int i=0; i < 2; i++)
         {
            Target FTarget = new Target();
            FOp.Correctors.LCorrector[0].LTarget.Add(FTarget);
         }

         Corrector FNoneCorrector = new Corrector
         {
            Name = "None",
            Type = "N"
         };
         FOp.Correctors.LCorrector.Add(FNoneCorrector);
         //! Create Input and Outputs List
         FOp.InputApproachPoints = new ObservableCollection<RobotPoint>();
         FOp.OutputApproachPoints = new ObservableCollection<RobotPoint>();
         FOp.WorkPoints = new ObservableCollection<RobotPoint>();
         return FOp;
      }


      private void GenerateOlp()
      {
         if (GenerateXmlFile())
         {
            //! Display Only First Tab
            VisibilityTargets = false;
            VisibilityAllPoints = false;
            VisibilityPattern = false;
            VisibilityApproachPoints = false;
            VisibilityProcessDefinition = false;
            ObjectFrameOriginPoint = NullPos;
            ObjectFrameXAxisPoint = NullPos;
            ObjectFrameXYPlanPoint = NullPos;
            //! Clear all Op
            GeneratedCellProgram.WorkSequence.LOperation.Clear();
            //! Make Generated Cell Program Null
            GeneratedCellProgram = null;
            BaseComputed = false;
            ProgramName = "Auto Generated Olp - " + DateTime.Now.ToString("MM-dd-yyyy_HH_mm_ss_fff");
         }
      }

      private bool GenerateXmlFile()
      {
         //
         //! Add Robot Points and their coordinates
         //
         DoAddPoints();
         //
         //! Control If Vision And Approach Points are present
         //
         bool IntegrityOk = ControlIntegrity();
         if (IntegrityOk)
         {
            //! Remove Non-Needed attibs
            XmlAttributeOverrides overrides = new XmlAttributeOverrides();
            XmlAttributes attribs = new XmlAttributes
            {
               XmlIgnore = true
            };

            attribs.XmlElements.Add(new XmlElementAttribute("WorkStatus"));
            attribs.XmlElements.Add(new XmlElementAttribute("WorkMode"));
            attribs.XmlElements.Add(new XmlElementAttribute("IsLoaded"));
            attribs.XmlElements.Add(new XmlElementAttribute("InputApproachPoints"));
            attribs.XmlElements.Add(new XmlElementAttribute("OutputApproachPoints"));
            attribs.XmlElements.Add(new XmlElementAttribute("UseSameInputOutputApproachPoint"));
            attribs.XmlElements.Add(new XmlElementAttribute("WorkPoints"));
            attribs.XmlElements.Add(new XmlElementAttribute("ZEscapeValue"));
            overrides.Add(typeof(Operation), "WorkStatus", attribs);
            overrides.Add(typeof(Operation), "WorkMode", attribs);
            overrides.Add(typeof(Operation), "InputApproachPoints", attribs);
            overrides.Add(typeof(Operation), "OutputApproachPoints", attribs);
            overrides.Add(typeof(RobotPoint), "WorkStatus", attribs);
            overrides.Add(typeof(RobotPoint), "WorkMode", attribs);
            overrides.Add(typeof(RobotPoint), "ZEscapeValue", attribs);
            overrides.Add(typeof(CellProgram), "IsLoaded", attribs);
            overrides.Add(typeof(Operation), "UseSameInputOutputApproachPoint", attribs);
            overrides.Add(typeof(Operation), "WorkPoints", attribs);

            //! Serialize Generated Cell Program
            XmlSerializer serializer = new XmlSerializer(typeof(CellProgram), overrides);
            string OlpFileName = ProgramName + ".xml";
            string OlpFilePath = Path.Combine(FileHandler.ProgramFolderPath, OlpFileName);
            TextWriter writer = new StreamWriter(OlpFilePath);
            // Serializes Generated Cell Program
            serializer.Serialize(writer, GeneratedCellProgram);
            writer.Close();
         }

         return IntegrityOk;
      }

      private void ComputeObjectFrame()
      {
         if ((ObjectFrameOriginPoint == NullPos) || (ObjectFrameXAxisPoint == NullPos) || (ObjectFrameXYPlanPoint == NullPos))
         {
            MessageHandler.ShowWarningMessageAck("At leat 3 points are mandatory to compute object Frame");
         }
         else
         {

            try
            {              
               Frame lComputedFrame = GeometryFunctions.DoFrameFrom3Points(ObjectFrameOriginPoint.ToPoint(), ObjectFrameXAxisPoint.ToPoint(), ObjectFrameXYPlanPoint.ToPoint());
               EulerFrame lEComputedFrame = new EulerFrame();
               lEComputedFrame = GeometryFunctions.DoFrameToEulerFrame(lComputedFrame);
               BaseComputed = true;
               GeneratedCellProgram.CellConfiguration.ConfigurationData.ObjectFrame = lEComputedFrame.ToString();
               SetComputedBase(lEComputedFrame);
            }  
            catch (Exception e)
            {
               MessageHandler.ShowWarningMessageAck("An Error Occured while Executing Geometry Function - Message " + e.Message);
            }

         }
      }

      private bool ControlIntegrity()
      {
         bool CanGenerate = true;
         MessageBoxButtons response;
         foreach (Operation AOperation in GeneratedCellProgram.WorkSequence.LOperation)
         {
            if (AOperation.InputApproachPoints.Count == 0)
            {
               if (CanGenerate)
               {
                  response = MessageHandler.ShowWarningMessage(
                     "Operation <" + AOperation.Name + "> do not have Input Approach Point(s). Generate File Anyway ?");
                  if (response == MessageBoxButtons.No)
                  {
                     CanGenerate = false;
                  }
               }
               else
               {
                  response = MessageHandler.ShowWarningMessageAck(
                     "Operation " + AOperation.Name + " do not have Input Approach Point(s).");
               }
            }

            if (AOperation.OutputApproachPoints.Count == 0)
            {
               if (CanGenerate)
               {
                  response = MessageHandler.ShowWarningMessage(
                     "Operation <" + AOperation.Name + "> do not have Output Approach Point(s). Generate File Anyway ?");
                  if (response == MessageBoxButtons.No)
                  {
                     CanGenerate = false;
                  }
               }
               else
               {
                  response = MessageHandler.ShowWarningMessageAck(
                     "Operation <" + AOperation.Name + "> do not have Output Approach Point(s).");
               }
            }

            bool Targetok = (AOperation.Correctors.LCorrector[0].LTarget[0].Location != null) &&
                            (AOperation.Correctors.LCorrector[0].LTarget[1].Location != null);
            if (!Targetok)
            {
               if (CanGenerate)
               {
                  response = MessageHandler.ShowWarningMessage(
                     "Operation " + AOperation.Name + " do not have vision targets(s). Generate File Anyway ?");
                  if (response == MessageBoxButtons.No)
                  {
                     CanGenerate = false;
                  }
               }
               else
               {
                  response = MessageHandler.ShowWarningMessageAck(
                     "Operation " + AOperation.Name + " do not have vision targets(s).");
               }
            }
         }
         return CanGenerate;
      }

      private void DoAddPoints()
      {
         DoAddInputTrajOnlyPoints();
         DoAddWorkPoints();
         DoAddOutputTrajOnlyPoints();
      }

      private void DoAddInputTrajOnlyPoints()
      {
         foreach (Operation Op in GeneratedCellProgram.WorkSequence.LOperation)
         {
            foreach (RobotPoint Point in Op.InputApproachPoints)
            {
               Op.RobotPoints.LRobotPoint.Add(Point);
            }
            
         }
      }

      private void DoAddOutputTrajOnlyPoints()
      {
         AdjustOutputPointName();
         foreach (Operation Op in GeneratedCellProgram.WorkSequence.LOperation)
         {
            foreach (RobotPoint Point in Op.OutputApproachPoints)
            {
               Op.RobotPoints.LRobotPoint.Add(Point);
            }
         }
      }

      private void AdjustOutputPointName()
      {
         foreach (Operation Op in GeneratedCellProgram.WorkSequence.LOperation)
         {
            if (Op.UseSameInputOutputApproachPoint)
            {
               for (int i = Op.InputApproachPoints.Count - 1; i >= 0; i--)
               {
                  RobotPoint OpPoint = Op.InputApproachPoints[i];
                  RobotPoint FPoint = new RobotPoint
                  {
                     Type = OpPoint.Type
                     
                  };
                  FPoint.MotionData = new MotionData();
                  FPoint.MotionData.MotionType = OpPoint.MotionData.MotionType;
                  FPoint.MotionData.Location = OpPoint.MotionData.Location;
                  FPoint.MotionData.CorrectorName = OpPoint.MotionData.CorrectorName;
                  FPoint.ProcessData =new ProcessData();
                  FPoint.ProcessData.Process = OpPoint.ProcessData.Process;
                  int j = (-i + Op.InputApproachPoints.Count - 1);
                  FPoint.Name = "Output Approach Point " + j.ToString() + " - Op " + Op.Name;
                  Op.OutputApproachPoints.Add(FPoint);
               }
            }
         }
      }

      private void DoAddWorkPoints()
      {
         foreach (Operation Op in GeneratedCellProgram.WorkSequence.LOperation)
         {
            foreach (RobotPoint Point in Op.WorkPoints)
            {
               CustomFrame EscapeFrame = new CustomFrame
               {
                  Z = -Point.ZEscapeValue
               };
               Point.MotionData.EscapeFrame = EscapeFrame.ToString();
               Op.RobotPoints.LRobotPoint.Add(Point);
            }
         }
      }

      private void TeachVisionTarget(int VisionTargetId)
      {

         CustomE6Pos Pos = KrlVarHandler.ReadPosVariable(KrlVariableNames.PosAct, Robot);
         AutoGeneratedSelectedOp.Correctors.LCorrector[0].LTarget[VisionTargetId].Location = Pos.ToString();
         UpdateVisionTargets();
         string ProcessFirstTarget = MacroList.cszClearLocalRelocData.ToUpper() + "/" +
                                     MacroList.cszLocateTargetXY.ToUpper() + "/" +
                                     MacroList.cszLocateTargetZRxRy.ToUpper() + "/" +
                                     MacroList.cszLocateTargetXY.ToUpper() + "/" +
                                     MacroList.cszStoreLocalData.ToUpper();
         string ProcessSecondTarget = MacroList.cszLocateTargetXY.ToUpper() + "/" +
                                      MacroList.cszLocateTargetZRxRy.ToUpper() + "/" +
                                      MacroList.cszLocateTargetXY.ToUpper() + "/" +
                                      MacroList.cszStoreLocalData.ToUpper();
         //! Add Points
         switch (VisionTargetId)
         {
            case 0:
               AddPoint("None", ProcessFirstTarget, "ManualTeach");
               break;

            case 1:
               AddPoint("None", ProcessSecondTarget, "ManualTeach");
               break;

         }
      }

      private void UpdateVisionTargets()
      {
         if (AutoGeneratedSelectedOp != null)
         {
            //! Set First and Second Target For HMI
            if (AutoGeneratedSelectedOp.Correctors.LCorrector[0].LTarget[0].Location != null)
            {
               FirstVisionTarget = KrlVarHandler.E6APosFromString(AutoGeneratedSelectedOp.Correctors.LCorrector[0].LTarget[0].Location);
            }
            else
            {
               FirstVisionTarget = NullPos;
            }
            if (autoGeneratedSelectedOp.Correctors.LCorrector[0].LTarget[1].Location != null)
            {
               SecondVisionTarget = KrlVarHandler.E6APosFromString(AutoGeneratedSelectedOp.Correctors.LCorrector[0].LTarget[1].Location);
            }
            else
            {
               SecondVisionTarget = NullPos;
            }
         }
      }

      private void MoveOp(bool IsUp)
      {
         //! Get Index of the selected item
         int Idx = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);

         //! Item Found
         if (Idx != -1)
         {
            if (IsUp)
            {
               if (Idx > 0)
               {
                  GeneratedCellProgram.WorkSequence.LOperation.Move(Idx, Idx - 1);
               }
            }
            else
            {
               if (Idx < (GeneratedCellProgram.WorkSequence.LOperation.Count - 1))
               {
                  GeneratedCellProgram.WorkSequence.LOperation.Move(Idx, Idx + 1);
               }
            }
         }
      }

      private void MoveAppPoint(bool IsInput, bool IsUp)
      {
         //! Get Index of the selected item
         int Idx = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);

         //! Item Found
         if (Idx != -1)
         {
            int IdxInPoint = GeneratedCellProgram.WorkSequence.LOperation[Idx].InputApproachPoints
               .IndexOf(SelectedInputPoint);
            int IdxOutPoint = GeneratedCellProgram.WorkSequence.LOperation[Idx].OutputApproachPoints
               .IndexOf(SelectedOutputPoint);

            if (IsInput)
            {
               if (IsUp)
               {
                  GeneratedCellProgram.WorkSequence.LOperation[Idx].InputApproachPoints
                     .Move(IdxInPoint, IdxInPoint - 1);
               }
               else
               {
                  GeneratedCellProgram.WorkSequence.LOperation[Idx].InputApproachPoints
                     .Move(IdxInPoint, IdxInPoint + 1);
               }
            }
            else
            {
               if (IsUp)
               {
                  GeneratedCellProgram.WorkSequence.LOperation[Idx].OutputApproachPoints
                     .Move(IdxOutPoint, IdxOutPoint - 1);
               }
               else
               {
                  GeneratedCellProgram.WorkSequence.LOperation[Idx].OutputApproachPoints
                     .Move(IdxOutPoint, IdxOutPoint + 1);
               }
            }
         }
      }

      private void AddTrajPoint(bool IsInputPoint)
      {
         //! Read $Axis_Act
         CustomE6Axis Axis = KrlVarHandler.ReadAxisVariable(KrlVariableNames.AxisAct, Robot);

         int NbOfTrajOnly = AutoGeneratedSelectedOp.InputApproachPoints.Count +
                            AutoGeneratedSelectedOp.OutputApproachPoints.Count;
         string szPointName;
         if (IsInputPoint)
         {
            szPointName = "Input Approach Point " + NbOfTrajOnly.ToString() + " - Op " + AutoGeneratedSelectedOp.Name;
         }
         else
         {
            szPointName = "Output Approach Point " + NbOfTrajOnly.ToString() + " - Op " + AutoGeneratedSelectedOp.Name;
         }

         RobotPoint Point = new RobotPoint
         {
            Name = szPointName,
            Type = cszTrajOnly,
            ProcessData = new ProcessData
            {
               Process = MacroList.cszNOP.ToUpper()
            },
            MotionData = new MotionData
            {
               MotionType = "JOINT",
               Location = Axis.ToString()
            }

         };

         //! Get Index of the selected item
         int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);
         if (IdxOp != -1)
         {
            if (IsInputPoint)
            {
               GeneratedCellProgram.WorkSequence.LOperation[IdxOp].InputApproachPoints.Add(Point);
            }
            else
            {
               GeneratedCellProgram.WorkSequence.LOperation[IdxOp].OutputApproachPoints.Add(Point);
            }
         }
      }

      private void RemoveTrajPoint(bool IsInputPoint)
      {
         //! Get Index of the selected item
         int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);

         if (IdxOp != -1)
         {
            if (IsInputPoint)
            {
               GeneratedCellProgram.WorkSequence.LOperation[IdxOp].InputApproachPoints.Remove(SelectedInputPoint);
            }
            else
            {
               GeneratedCellProgram.WorkSequence.LOperation[IdxOp].OutputApproachPoints.Remove(SelectedOutputPoint);
            }
         }
      }

      private void AddPoint(string ACorrectorName, string AProcessName, string APatternName)
      {

         //! Read $Pos_Act
         CustomE6Pos Pos = KrlVarHandler.ReadPosVariable(KrlVariableNames.PosAct, Robot);
         int NbofWorkPoint = AutoGeneratedSelectedOp.WorkPoints.Count;
         CustomFrame EscapeFrame = new CustomFrame();
         CustomFrame OffsetFrame = new CustomFrame();

         RobotPoint FRobotPoint = new RobotPoint
         {
            Name = "Work Point " + NbofWorkPoint.ToString() + " - Op " + AutoGeneratedSelectedOp.Name,
            Type = cszWork,
            ProcessData = new ProcessData
            {
               Process = AProcessName,
               PatternName = APatternName
            },
            MotionData = new MotionData
            {
               MotionType = "CARTEscape",
               Location = Pos.ToString(),
               CorrectorName = ACorrectorName,
               EscapeFrame = EscapeFrame.ToString(),
               OffsetFrame = OffsetFrame.ToString()

            }
         };
         //! Add Point 
         AutoGeneratedSelectedOp.WorkPoints.Add(FRobotPoint);
         //! Select Last Point Add
         AutoGeneratedSelectedPoint = AutoGeneratedSelectedOp.WorkPoints[AutoGeneratedSelectedOp.WorkPoints.Count - 1];
      }

      private void RemovePoint()
      {
         AutoGeneratedSelectedOp.WorkPoints.Remove(AutoGeneratedSelectedPoint);
      }

      private void MovePoint(bool IsUp)
      {
         //! Get Index of the selected item
         int IdxOp = GeneratedCellProgram.WorkSequence.LOperation.IndexOf(AutoGeneratedSelectedOp);
         if (IdxOp != -1)
         {
            int Idx = GeneratedCellProgram.WorkSequence.LOperation[IdxOp].WorkPoints.IndexOf(AutoGeneratedSelectedPoint);

            //! Item Found
            if (Idx != -1)
            {
               if (IsUp)
               {
                  if (Idx > 0)
                  {
                     GeneratedCellProgram.WorkSequence.LOperation[IdxOp].WorkPoints.Move(Idx, Idx - 1);
                  }
               }
               else
               {
                  if (Idx < (GeneratedCellProgram.WorkSequence.LOperation[IdxOp].WorkPoints.Count - 1))
                  {
                     GeneratedCellProgram.WorkSequence.LOperation[IdxOp].WorkPoints.Move(Idx, Idx + 1);
                  }
               }
            }
         }
      }

      private void AddMacroToProcess(string AMacroToAdd)
      {

         string NewProcess;
         string MacroToAdd;

         //! Add TCP Nop and PSet
         switch (AMacroToAdd)
         {
            case MacroList.cszNOP:
               if (TcpNop <= 0)
               {
                  TcpNop = 1;
               }

               if (TcpNop >= 10)
               {
                  TcpNop = 10;
               }
               MacroToAdd = MacroList.cszNOP + TcpNop.ToString();
               break;

            case MacroList.cszDrill:
               MacroToAdd = MacroList.cszDrill + PSet.ToString("D3");
               break;

            default:
               MacroToAdd = AMacroToAdd;
               break;

         }
         //! Add Macro
         if (AutoGeneratedSelectedPoint.ProcessData.Process != "")
         {
            NewProcess = AutoGeneratedSelectedPoint.ProcessData.Process + "/" + MacroToAdd.ToUpper();
         }
         else
         {
            NewProcess = MacroToAdd.ToUpper();
         }
         AutoGeneratedSelectedPoint.ProcessData.Process = NewProcess;
      }

      private void RemoveLastMacro()
      {
         string CurrentProcess = AutoGeneratedSelectedPoint.ProcessData.Process;

         string[] SplittedProcess = CurrentProcess.Split('/');

         List<string> MacroList = new List<string>();
         foreach (string Macro in SplittedProcess)
         {
            MacroList.Add(Macro);
         }

         if (MacroList.Count > 0)
         {
            MacroList.Remove(MacroList.Last());
         }


         StringBuilder sb = new StringBuilder();
         if (MacroList.Count > 0)
         {
            for (int i=0; i<= (MacroList.Count - 1); i++)
            {
               sb.Append(MacroList[i]);
               if ((MacroList.Count > 1) && (i < (MacroList.Count - 1)))
               {
                  sb.Append('/');
               }
            }
            
         }

         string NewProcess = sb.ToString();
         AutoGeneratedSelectedPoint.ProcessData.Process = NewProcess;
      }

      private void SetBase()
      {
         if (!BaseComputed)
         {
            KrlVarHandler.WriteVariable(KrlVariableNames.Base, KrlVariableNames.NullFrame, Robot);
            KrlVarHandler.WriteVariable(KrlVariableNames.BaseOlpGenerator, KrlVariableNames.NullFrame, Robot);
         }
         else
         {
            KrlVarHandler.WriteFrameVariable(KrlVariableNames.Base, ComputedBase, Robot);
            KrlVarHandler.WriteFrameVariable(KrlVariableNames.BaseOlpGenerator, ComputedBase, Robot);
         }
      }

      private void SetComputedBase(EulerFrame AEulerFrame)
      {
         ComputedBase = AEulerFrame;
         SetBase();
      }

      private void StartManualPositionning()
      {
         try
         {
            FlexDrillService.StartManualPositionning();
         }
         catch (Exception e)
         {
            // Log
            FlexDrillService.Log.WriteMessage(TraceEventType.Error,
               $"An unexpected error occurred while doing Manual Positionning. {e.Message}.",
               e.StackTrace);
         }
      }
      #endregion
   }
}